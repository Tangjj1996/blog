---
interface Props {
  owner: string;
  repo: string;
}

const { owner, repo } = Astro.props;

const fetchGitHubStars = async (owner: string, repo: string) => {
  const query = `
    query {
      repository(owner: "${owner}", name: "${repo}") {
        stargazers {
          totalCount
        }
      }
    }
  `;

  const url = "https://api.github.com/graphql";
  const headers = {
    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
    "Content-Type": "application/json",
  };

  const response = await fetch(url, {
    method: "POST",
    headers,
    body: JSON.stringify({ query }),
  });

  const data = await response.json();
  return data.data.repository.stargazers.totalCount;
};

const starCount = async () => {
  const count = await fetchGitHubStars(owner, repo);

  if (count > 1000) {
    return `${(count / 1000).toFixed(1)}k`;
  }
  return count;
};
---

<span>{starCount()}</span>
